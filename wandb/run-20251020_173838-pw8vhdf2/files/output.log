Traceback (most recent call last):
  File "pixel.py", line 96, in __init__
    reflectance_GT_files = np.array(list(executor.map(lambda rc: load_npy(config["reflectance_data_dir"],*rc), [(row, col) for row in range(*config["row_slice"]) for col in range(*config["col_slice"])])))
  File "/home/gmh72/.conda/envs/TensoIR3/lib/python3.8/concurrent/futures/_base.py", line 608, in map
    fs = [self.submit(fn, *args) for args in zip(*iterables)]
  File "/home/gmh72/.conda/envs/TensoIR3/lib/python3.8/concurrent/futures/_base.py", line 608, in <listcomp>
    fs = [self.submit(fn, *args) for args in zip(*iterables)]
  File "/home/gmh72/.conda/envs/TensoIR3/lib/python3.8/concurrent/futures/thread.py", line 188, in submit
    self._adjust_thread_count()
  File "/home/gmh72/.conda/envs/TensoIR3/lib/python3.8/concurrent/futures/thread.py", line 195, in _adjust_thread_count
    if self._idle_semaphore.acquire(timeout=0):
  File "/home/gmh72/.conda/envs/TensoIR3/lib/python3.8/threading.py", line 422, in acquire
    with self._cond:
  File "/home/gmh72/.conda/envs/TensoIR3/lib/python3.8/threading.py", line 247, in __enter__
    return self._lock.__enter__()
KeyboardInterrupt

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "pixel.py", line 214, in <module>
    dataset = ReflectanceDataset(config)
  File "pixel.py", line 96, in __init__
    reflectance_GT_files = np.array(list(executor.map(lambda rc: load_npy(config["reflectance_data_dir"],*rc), [(row, col) for row in range(*config["row_slice"]) for col in range(*config["col_slice"])])))
  File "/home/gmh72/.conda/envs/TensoIR3/lib/python3.8/concurrent/futures/_base.py", line 644, in __exit__
    self.shutdown(wait=True)
  File "/home/gmh72/.conda/envs/TensoIR3/lib/python3.8/concurrent/futures/thread.py", line 236, in shutdown
    t.join()
  File "/home/gmh72/.conda/envs/TensoIR3/lib/python3.8/threading.py", line 1011, in join
    self._wait_for_tstate_lock()
  File "/home/gmh72/.conda/envs/TensoIR3/lib/python3.8/threading.py", line 1027, in _wait_for_tstate_lock
    elif lock.acquire(block, timeout):
KeyboardInterrupt
